const mongoose = require('mongoose');
const Prediction = require('../models/Prediction');
require('dotenv').config();

// Sample predictions data
const samplePredictions = [
  // Match 1: ◊û◊õ◊ë◊ô ◊™◊ú ◊ê◊ë◊ô◊ë vs ◊î◊§◊ï◊¢◊ú ◊™◊ú ◊ê◊ë◊ô◊ë (FINISHED: 2-1)
  {
    user: '◊¢◊ï◊û◊®_◊î◊û◊ß◊¶◊ï◊¢◊ü',
    matchId: '1',
    homeScore: 2,
    awayScore: 1,
    matchInfo: {
      homeTeam: '◊û◊õ◊ë◊ô ◊™◊ú ◊ê◊ë◊ô◊ë',
      awayTeam: '◊î◊§◊ï◊¢◊ú ◊™◊ú ◊ê◊ë◊ô◊ë',
      competition: '◊ú◊ô◊í◊™ ◊î◊¢◊ú',
      matchDate: new Date(Date.now() - 3 * 60 * 60 * 1000)
    }
  },
  {
    user: '◊û◊ô◊õ◊ú_◊î◊û◊™◊ó◊®◊î',
    matchId: '1',
    homeScore: 1,
    awayScore: 0,
    matchInfo: {
      homeTeam: '◊û◊õ◊ë◊ô ◊™◊ú ◊ê◊ë◊ô◊ë',
      awayTeam: '◊î◊§◊ï◊¢◊ú ◊™◊ú ◊ê◊ë◊ô◊ë',
      competition: '◊ú◊ô◊í◊™ ◊î◊¢◊ú',
      matchDate: new Date(Date.now() - 3 * 60 * 60 * 1000)
    }
  },
  {
    user: '◊ì◊ï◊ì_◊î◊û◊†◊¶◊ó',
    matchId: '1',
    homeScore: 2,
    awayScore: 1,
    matchInfo: {
      homeTeam: '◊û◊õ◊ë◊ô ◊™◊ú ◊ê◊ë◊ô◊ë',
      awayTeam: '◊î◊§◊ï◊¢◊ú ◊™◊ú ◊ê◊ë◊ô◊ë',
      competition: '◊ú◊ô◊í◊™ ◊î◊¢◊ú',
      matchDate: new Date(Date.now() - 3 * 60 * 60 * 1000)
    }
  },

  // Match 2: ◊ë◊ô◊™"◊® ◊ô◊®◊ï◊©◊ú◊ô◊ù vs ◊û◊õ◊ë◊ô ◊ó◊ô◊§◊î (FINISHED: 0-2)
  {
    user: '◊™◊û◊®_◊î◊û◊™◊û◊ò◊ô◊ß◊ê◊ô◊™',
    matchId: '2',
    homeScore: 0,
    awayScore: 2,
    matchInfo: {
      homeTeam: '◊ë◊ô◊™"◊® ◊ô◊®◊ï◊©◊ú◊ô◊ù',
      awayTeam: '◊û◊õ◊ë◊ô ◊ó◊ô◊§◊î',
      competition: '◊ú◊ô◊í◊™ ◊î◊¢◊ú',
      matchDate: new Date(Date.now() - 1 * 60 * 60 * 1000)
    }
  },
  {
    user: '◊ô◊ï◊°◊ô_◊î◊õ◊ì◊ï◊®◊í◊ú◊ü',
    matchId: '2',
    homeScore: 1,
    awayScore: 1,
    matchInfo: {
      homeTeam: '◊ë◊ô◊™"◊® ◊ô◊®◊ï◊©◊ú◊ô◊ù',
      awayTeam: '◊û◊õ◊ë◊ô ◊ó◊ô◊§◊î',
      competition: '◊ú◊ô◊í◊™ ◊î◊¢◊ú',
      matchDate: new Date(Date.now() - 1 * 60 * 60 * 1000)
    }
  },
  {
    user: '◊©◊®◊î_◊î◊û◊†◊ó◊©◊î',
    matchId: '2',
    homeScore: 0,
    awayScore: 1,
    matchInfo: {
      homeTeam: '◊ë◊ô◊™"◊® ◊ô◊®◊ï◊©◊ú◊ô◊ù',
      awayTeam: '◊û◊õ◊ë◊ô ◊ó◊ô◊§◊î',
      competition: '◊ú◊ô◊í◊™ ◊î◊¢◊ú',
      matchDate: new Date(Date.now() - 1 * 60 * 60 * 1000)
    }
  },

  // Match 3: ◊î◊§◊ï◊¢◊ú ◊ë◊ê◊® ◊©◊ë◊¢ vs ◊û◊õ◊ë◊ô ◊†◊™◊†◊ô◊î (FINISHED: 3-0)
  {
    user: '◊ì◊†◊ô◊ê◊ú_◊î◊û◊ê◊û◊ü',
    matchId: '3',
    homeScore: 3,
    awayScore: 0,
    matchInfo: {
      homeTeam: '◊î◊§◊ï◊¢◊ú ◊ë◊ê◊® ◊©◊ë◊¢',
      awayTeam: '◊û◊õ◊ë◊ô ◊†◊™◊†◊ô◊î',
      competition: '◊ú◊ô◊í◊™ ◊î◊¢◊ú',
      matchDate: new Date(Date.now() - 2 * 60 * 60 * 1000)
    }
  },
  {
    user: '◊®◊ï◊ü_◊î◊°◊ò◊ò◊ô◊°◊ò◊ô◊ß◊ê◊ô',
    matchId: '3',
    homeScore: 2,
    awayScore: 0,
    matchInfo: {
      homeTeam: '◊î◊§◊ï◊¢◊ú ◊ë◊ê◊® ◊©◊ë◊¢',
      awayTeam: '◊û◊õ◊ë◊ô ◊†◊™◊†◊ô◊î',
      competition: '◊ú◊ô◊í◊™ ◊î◊¢◊ú',
      matchDate: new Date(Date.now() - 2 * 60 * 60 * 1000)
    }
  },
  {
    user: '◊ú◊ô◊ê◊ï◊®_◊î◊ê◊ï◊î◊ì',
    matchId: '3',
    homeScore: 1,
    awayScore: 1,
    matchInfo: {
      homeTeam: '◊î◊§◊ï◊¢◊ú ◊ë◊ê◊® ◊©◊ë◊¢',
      awayTeam: '◊û◊õ◊ë◊ô ◊†◊™◊†◊ô◊î',
      competition: '◊ú◊ô◊í◊™ ◊î◊¢◊ú',
      matchDate: new Date(Date.now() - 2 * 60 * 60 * 1000)
    }
  },

  // Match 4: ◊î◊§◊ï◊¢◊ú ◊ó◊ô◊§◊î vs ◊û◊õ◊ë◊ô ◊§◊™◊ó ◊™◊ß◊ï◊ï◊î (LIVE: 1-1)
  {
    user: '◊†◊ï◊¢◊î_◊î◊ó◊ì◊©◊î',
    matchId: '4',
    homeScore: 1,
    awayScore: 1,
    matchInfo: {
      homeTeam: '◊î◊§◊ï◊¢◊ú ◊ó◊ô◊§◊î',
      awayTeam: '◊û◊õ◊ë◊ô ◊§◊™◊ó ◊™◊ß◊ï◊ï◊î',
      competition: '◊ú◊ô◊í◊™ ◊î◊¢◊ú',
      matchDate: new Date(Date.now() + 30 * 60 * 1000)
    }
  },
  {
    user: '◊¢◊ï◊û◊®_◊î◊û◊ß◊¶◊ï◊¢◊ü',
    matchId: '4',
    homeScore: 2,
    awayScore: 0,
    matchInfo: {
      homeTeam: '◊î◊§◊ï◊¢◊ú ◊ó◊ô◊§◊î',
      awayTeam: '◊û◊õ◊ë◊ô ◊§◊™◊ó ◊™◊ß◊ï◊ï◊î',
      competition: '◊ú◊ô◊í◊™ ◊î◊¢◊ú',
      matchDate: new Date(Date.now() + 30 * 60 * 1000)
    }
  }
];

async function addSamplePredictions() {
  try {
    // Connect to MongoDB
    await mongoose.connect(process.env.MONGO_URI);
    console.log('Connected to MongoDB');

    // Clear existing predictions (optional - comment out if you want to keep existing predictions)
    await Prediction.deleteMany({});
    console.log('Cleared existing predictions');

    // Add sample predictions
    const predictions = await Prediction.insertMany(samplePredictions);
    console.log(`‚úÖ Added ${predictions.length} sample predictions successfully!`);

    // Display the predictions by match
    console.log('\nüìä Sample Predictions Added:');
    console.log('==========================');
    
    const predictionsByMatch = {};
    predictions.forEach(pred => {
      if (!predictionsByMatch[pred.matchId]) {
        predictionsByMatch[pred.matchId] = [];
      }
      predictionsByMatch[pred.matchId].push(pred);
    });

    Object.keys(predictionsByMatch).forEach(matchId => {
      const matchPreds = predictionsByMatch[matchId];
      const firstPred = matchPreds[0];
      
      console.log(`\nüèüÔ∏è Match ${matchId}: ${firstPred.matchInfo.homeTeam} vs ${firstPred.matchInfo.awayTeam}`);
      console.log(`   Status: ${matchId <= 3 ? 'FINISHED' : 'LIVE/SCHEDULED'}`);
      console.log(`   Predictions: ${matchPreds.length}`);
      
      matchPreds.forEach(pred => {
        console.log(`   - ${pred.user}: ${pred.homeScore}-${pred.awayScore}`);
      });
    });

    console.log('\nüéâ Sample predictions have been added!');
    console.log('The automatic scoring service will process finished matches every 5 minutes.');

  } catch (error) {
    console.error('‚ùå Error adding sample predictions:', error);
  } finally {
    await mongoose.disconnect();
    console.log('Disconnected from MongoDB');
  }
}

// Run the script
addSamplePredictions();
